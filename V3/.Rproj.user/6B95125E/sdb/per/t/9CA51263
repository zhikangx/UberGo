{
    "collab_server" : "",
    "contents" : "\n## Load Package\n\nif (1==1) {\n        library(leaflet)\n        library(scales)\n        library(lattice)\n        library(DT)\n        library(shiny)\n        \n        if(!require(\"dplyr\")){\n                install.packages(\"dplyr\")\n                library(\"dplyr\")\n        }\n        \n        if(!require(\"stringr\")){\n                install.packages(\"stringr\")\n                library(\"stringr\")\n        }\n        \n        if(!require(\"RbaiduLBS\")){\n                install.packages(\"RbaiduLBS\")\n                library(\"RbaiduLBS\")\n        }\n        \n        if(!require(\"rvest\")){\n                install.packages(\"rvest\")\n                library(\"rvest\")\n        }\n        \n        if(!require(\"sp\")){\n                install.packages(\"sp\")\n                library(\"sp\")\n        }\n        \n        if(!require(\"ggplot2\")){\n                install.packages(\"ggplot2\")\n                library(\"ggplot2\")\n        }\n        \n        if(!require(\"sf\")){\n                install.packages(\"sf\")\n                library(\"sf\")\n        }\n\n        if(!require(\"Quandl\")){\n                install.packages(\"Quandl\")\n                library(\"Quandl\")\n        }\n        \n        if(!require(\"reshape2\")){\n                install.packages(\"reshape2\")\n                library(\"reshape2\")\n        }\n        \n        if(!require(\"knitr\")){\n                install.packages(\"knitr\")\n                library(\"knitr\")\n        }\n\n        if(!require(\"leaflet\")){\n                install.packages(\"leaflet\")\n                library(\"leaflet\")\n        }\n        \n        if(!require(\"rvest\")){\n                install.packages(\"rvest\")\n                library(\"rvest\")\n        }\n        \n        if(!require(\"sp\")){\n                install.packages(\"sp\")\n                library(\"sp\")\n        }\n        \n        if(!require(\"ggplot2\")){\n                install.packages(\"ggplot2\")\n                library(\"ggplot2\")\n        }\n        \n        if(!require(\"sf\")){\n                install.packages(\"sf\")\n                library(\"sf\")\n        }\n        \n        if(!require(\"rMaps\")){\n                install.packages(\"rMaps\")\n                library(\"rMaps\")\n        }\n        \n        if(!require(\"Quandl\")){\n                install.packages(\"Quandl\")\n                library(\"Quandl\")\n        }\n        \n        if(!require(\"reshape2\")){\n                install.packages(\"reshape2\")\n                library(\"reshape2\")\n        }\n        \n        if(!require(\"knitr\")){\n                install.packages(\"knitr\")\n                library(\"knitr\")\n        }\n        \n        if(!require(\"plyr\")){\n                install.packages(\"plyr\")\n                library(\"plyr\")\n        }\n        \n        if(!require(\"ggmap\")){\n                install.packages(\"ggmap\")\n                library(\"ggmap\")\n        }\n        \n        if(!require(\"curl\")){\n                install.packages(\"curl\")\n                library(\"curl\")\n        }\n\n}\n\nfunction(input, output, session) {\n        \n        output$map <- renderLeaflet({\n        \n                input$button\n                # isolate({\n                #         target_name <- as.character(input$caption)\n                # })\n                target_name <- as.character(input$caption)\n        ## Set Target Address\n        # target_name <- \"上海市银城中路488号\"\n        # target_name <- \"上海市江宁路396号\"\n        # target_name <- \"上海市静安区愚园路68号\"\n        # target_name <- as.character(input$caption)\n\n        target_address <- getGeocoding(address = target_name, city = '上海', ak = 'ZxjZ6VnwlxvRarbnVtg38IcCwpiGLZzN')\n        target_address_geo <- target_address\n        range <- 1000\n        \n        ## Set seed\n        set.seed(100)\n        \n        ## Process data for get nearby stores\n        \n        if (1==1) {\n                \n                ## Find nearby stations\n                \n                ### Define Functions \n        \n                find_nearby_store <- function(target_address,store_name,range) {\n                        store <- store_name\n                        target <- target_address\n                        set_range <- range\n                        nearbystores <- searchPlace(store, location = c(target$lat,target$lng), radius = set_range,ak = \"ZxjZ6VnwlxvRarbnVtg38IcCwpiGLZzN\")\n                        return(nearbystores)\n                }\n                \n                calculate_walking_dist <- function(origin_address,dest) {\n                        destination <- dest\n                        origin <- origin_address\n                        \n                        destination$walking_distance <- NA\n                        destination$walking_duration <- NA\n                        \n                        for (i in 1:nrow(destination)) {\n                                t <- searchDirection(origin = paste(origin$lat,origin$lng,sep = \",\"), destination = paste(destination$lat[i],destination$lng[i],sep = \",\"), mode = \"walking\", region = \"Shanghai\", ak = \"ZxjZ6VnwlxvRarbnVtg38IcCwpiGLZzN\")\n                                a <- t$result$routes\n                                destination$walking_distance[i] <- a[[1]]$distance\n                                destination$walking_duration[i] <- a[[1]]$duration\n                                # print(i)\n                        }\n                        destination$walking_duration <- destination$walking_duration/60\n                        destination <- destination[,c(\"name\",\"lat\",\"lng\",\"address\",\"distance\",\"walking_distance\",\"walking_duration\")]\n                        return(destination)\n                }\n                \n                # calculate_walking_dist(target_name, landmark_geo)\n                # wk_dis_to_centerarea <- calculate_walking_dist(target_name, centerarea_geo)\n                \n                find_geo_location <- function(target_list) {\n                        target_list <-star_hotel\n                        target <- target_list\n                        target$lat <- 0\n                        target$lng <- 0\n                        \n                        for (i in 1:nrow(target)) {\n                                # i=1\n                                tem_address <- getGeocoding(address = target$address[i], city = '上海', ak = 'ZxjZ6VnwlxvRarbnVtg38IcCwpiGLZzN')\n                                target$lat[i] <- tem_address$lat\n                                target$lng[i] <- tem_address$lng\n                        }\n                        return(target)\n                }\n        \n                calculate_straight_dist <- function(target,storelist) {\n                        # target <- target_location\n                        # storelist <- store_info\n                        storelist$distance <- NA\n                        for (i in 1:nrow(storelist)) {\n                                storelist$distance[i] <- distm(c(storelist$lng[i], storelist$lat[i]), c(target$lng[1], target$lat[1]), fun = distHaversine)\n                        }\n                        return(storelist)\n                }\n                \n                ### Apply functions\n                \n                ## station\n                nearby_station <- find_nearby_store(target_address,\"地铁站\" ,800)\n                nearby_station <- calculate_walking_dist(target_address,nearby_station)\n                write.csv(nearby_station,\"nearby_station.csv\")\n                \n                ## star hotels\n                \n                ### get geo first\n                # star_hotel <- read.csv(\"~/Desktop/Mixpace/ShinyMap/grading/star_hotel.csv\",stringsAsFactors = FALSE)\n                # str(star_hotel)\n                # star_hotel_geo <- find_geo_location(star_hotel)\n                # write.csv(star_hotel_geo,\"star_hotel_geo.csv\")\n                \n                star_hotel_geo <- read.csv(\"star_hotel_geo.csv\",stringsAsFactors = FALSE)\n                str(star_hotel_geo)\n                \n                ### calculate distnce\n                nearby_star_hotel <- calculate_straight_dist(target_address,star_hotel_geo)\n                \n                ### filter distance that are less than 1000m\n                nearby_star_hotel_1000m_str <- nearby_star_hotel[nearby_star_hotel$distance<1001,]\n                \n                ### calculate wk dis for these hotels\n                nearby_star_hotel_1000m_walk <- calculate_walking_dist(target_address,nearby_star_hotel_1000m_str)\n                nearby_star_hotel_1000m_walk <- nearby_star_hotel_1000m_walk[nearby_star_hotel_1000m_walk$walking_distance<1000,]\n                nearby_star_hotel_1000m_walk <- nearby_star_hotel_1000m_walk[nearby_star_hotel_1000m_walk$walking_duration<10,]\n                write.csv(nearby_star_hotel_1000m_walk,\"nearby_star_hotel.csv\")\n                \n                ## a level office building\n                \n                ### waiting for data\n        \n                ## massive business\n                \n                ### find data of nearby shopping center\n                \n                ### find data of average price of each shopping center\n                \n                ## Starbucks\n                \n                nearby_stb_store <- find_nearby_store(target_address,\"星巴克\",1000)\n                nearby_stb_store <- calculate_walking_dist(target_address,nearby_stb_store)\n                nearby_stb_store_1000m_walk <- nearby_stb_store[nearby_stb_store$walking_distance<1000,]\n                nearby_stb_store_1000m_walk <- nearby_stb_store_1000m_walk[nearby_stb_store_1000m_walk$walking_duration<10,]\n                write.csv(nearby_stb_store_1000m_walk,\"nearby_stb_store.csv\")\n                \n                ### MDC\n                nearby_mdc_store <- find_nearby_store(target_address,\"麦当劳\",2000)\n                nearby_mdc_store <- calculate_walking_dist(target_address,nearby_mdc_store)\n                nearby_mdc_store_2000m_walk <- nearby_mdc_store[nearby_mdc_store$walking_distance<2000,]\n                nearby_mdc_store_2000m_walk <- nearby_mdc_store_2000m_walk[nearby_mdc_store_2000m_walk$walking_duration<20,]\n                write.csv(nearby_mdc_store_2000m_walk,\"nearby_mdc_store.csv\")\n                \n                ### restaurants\n                ##################### Considering using meituan or dazhongdianping data\n                nearby_restaurant <- find_nearby_store(target_address,\"餐厅\",1000)\n                restaurant_avg <- mean(as.integer(as.character(nearby_restaurant$price)))\n                nearby_restaurant <- calculate_walking_dist(target_address,nearby_restaurant)\n                nearby_restaurant_1000m_walk <- nearby_restaurant[nearby_restaurant$walking_distance<1000,]\n                write.csv(nearby_restaurant_1000m_walk,\"nearby_restaurant.csv\")\n                \n        }\n        \n        ## Process data for geo transfer\n        \n        if (1==1) {\n                \n                ### Read Data\n                \n                nearby_star_hotel <- nearby_star_hotel_1000m_walk\n                nearby_mdc_store <- nearby_mdc_store_2000m_walk\n                nearby_station <- nearby_station\n                nearby_stb_store <- nearby_stb_store_1000m_walk\n                nearby_restaurant <- nearby_restaurant_1000m_walk\n                \n                ### Clean and Combine data\n                \n                str(nearby_star_hotel)\n                nearby_star_hotel <- nearby_star_hotel[,c(\"name\",\"lat\",\"lng\",\"address\",\"walking_distance\",\"walking_duration\")]\n                if (nrow(nearby_star_hotel)>0) {\n                        nearby_star_hotel$cid <- \"hotel\"       \n                }\n        \n                str(nearby_mdc_store)\n                nearby_mdc_store <- nearby_mdc_store[,c(\"name\",\"lat\",\"lng\",\"address\",\"walking_distance\",\"walking_duration\")]\n                if (nrow(nearby_mdc_store)>0) {\n                        nearby_mdc_store$cid <- \"mdc\"       \n                }\n        \n                str(nearby_station)\n                nearby_station <- nearby_station[,c(\"name\",\"lat\",\"lng\",\"address\",\"walking_distance\",\"walking_duration\")]\n                if (nrow(nearby_station)>0) {\n                        nearby_station$cid <- \"station\"       \n                }\n                \n                str(nearby_stb_store)\n                nearby_stb_store <- nearby_stb_store[,c(\"name\",\"lat\",\"lng\",\"address\",\"walking_distance\",\"walking_duration\")]\n                if (nrow(nearby_stb_store)>0) {\n                        nearby_stb_store$cid <- \"stb\"       \n                }\n                \n                str(nearby_restaurant)\n                nearby_restaurant <- nearby_restaurant[,c(\"name\",\"lat\",\"lng\",\"address\",\"walking_distance\",\"walking_duration\")]\n                if (nrow(nearby_restaurant)>0) {\n                        nearby_restaurant$cid <- \"restaurant\"       \n                }\n                \n                db_nearby_amenty <- rbind(nearby_star_hotel, nearby_mdc_store, nearby_station, nearby_stb_store, nearby_restaurant)\n                write.csv(db_nearby_amenty,\"db_nearby_amenty.csv\")\n                str(db_nearby_amenty)\n           \n                ### Define Function\n                \n                ### Define Transform Function\n                \n                a = 6378245.0\n                x_pi = 3.14159265358979324 * 3000.0 / 180.0\n                ee = 0.00669342162296594323\n                pi = 3.1415926535897932384626\n                \n                transformlat <- function(lng, lat) {\n                        ret = -100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + 0.1 * lng * lat + 0.2 * sqrt(abs(lng))\n                        ret <- ret + (20.0 * sin(6.0 * lng * pi) + 20.0 * sin(2.0 * lng * pi)) * 2.0 / 3.0\n                        ret <- ret + (20.0 * sin(lat * pi) + 40.0 * sin(lat / 3.0 * pi)) * 2.0 / 3.0\n                        ret <- ret + (160.0 * sin(lat / 12.0 * pi) + 320 * sin(lat * pi / 30.0)) * 2.0 / 3.0\n                        return(ret)\n                }\n                \n                transformlng <- function(lng,  lat) {\n                        ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + 0.1 * lng * lat + 0.1 * sqrt(abs(lng))\n                        ret <- ret + (20.0 * sin(6.0 * lng * pi) + 20.0 * sin(2.0 * lng * pi)) * 2.0 / 3.0\n                        ret <- ret + (20.0 * sin(lng * pi) + 40.0 * sin(lng / 3.0 * pi)) * 2.0 / 3.0\n                        ret <- ret + (150.0 * sin(lng / 12.0 * pi) + 300.0 * sin(lng / 30.0 * pi)) * 2.0 / 3.0\n                        return(ret)\n                }\n                \n                bd09togcj02 <- function(bd_lon, bd_lat) {\n                        x = bd_lon - 0.0065\n                        y = bd_lat - 0.006\n                        z = sqrt(x * x + y * y) - 0.00002 * sin(y * x_pi)\n                        theta = atan2(y, x) - 0.000003 * cos(x * x_pi)\n                        gg_lng = z * cos(theta)\n                        gg_lat = z * sin(theta)\n                        return(c(gg_lng, gg_lat))\n                }\n                \n                gcj02towgs84 <- function(lng, lat) {\n                        dlat = transformlat(lng - 105.0, lat - 35.0)\n                        dlng = transformlng(lng - 105.0, lat - 35.0)\n                        radlat = lat / 180.0 * pi\n                        magic = sin(radlat)\n                        magic = 1 - ee * magic * magic\n                        sqrtmagic = sqrt(magic)\n                        dlat = (dlat * 180.0) / ((a * (1 - ee)) / (magic * sqrtmagic) * pi)\n                        dlng = (dlng * 180.0) / (a / sqrtmagic * cos(radlat) * pi)\n                        mglat = lat + dlat\n                        mglng = lng + dlng\n                        return( c(lng * 2 - mglng, lat * 2 - mglat))\n                }\n                \n                add_wgs_coor <- function(org_data) {\n                        data_filter <- org_data\n                        data_filter$lat_wgs84 <- 0\n                        data_filter$lng_wgs84 <- 0        \n                        \n                        for (i in 1:nrow(data_filter)) {\n                                tem_lat <- data_filter[i,\"lat\"]\n                                tem_lng <- data_filter[i,\"lng\"]\n                                new_gps_1 <- bd09togcj02(tem_lng,tem_lat)\n                                new_gps_1_lat <- new_gps_1[2]\n                                new_gps_1_lng <- new_gps_1[1]\n                                new_gps_2 = gcj02towgs84(new_gps_1_lng, new_gps_1_lat)\n                                data_filter$lat_wgs84[i] <- new_gps_2[2]\n                                data_filter$lng_wgs84[i] <- new_gps_2[1]\n                        }\n                        return(data_filter)\n                }\n        \n                ### Apply function \n                \n                target_address_geo <- add_wgs_coor(target_address)\n                target_address_geo <- target_address_geo[,c(\"address\",\"city\",\"lat_wgs84\",\"lng_wgs84\")]\n                colnames(target_address_geo)[3] <-\"lat\"\n                colnames(target_address_geo)[4] <-\"lng\"\n                write.csv(target_address_geo,\"target_address_geo.csv\")\n                \n                db_nearby_amenty <- add_wgs_coor(db_nearby_amenty)\n                str(db_nearby_amenty)\n                \n                db_nearby_amenty <- db_nearby_amenty[,c(\"name\",\"lat_wgs84\",\"lng_wgs84\",\"address\",\"walking_distance\",\"walking_duration\",\"cid\")]\n                colnames(db_nearby_amenty)[2] <-\"lat\"\n                colnames(db_nearby_amenty)[3] <-\"lng\"\n                str(db_nearby_amenty)\n                \n                ### Export \n                \n                write.csv(db_nearby_amenty,\"db_nearby_amenty.csv\")\n                \n        }\n        \n        ## Read data\n        if (1==1) {\n                db_nearby_amenty <- db_nearby_amenty\n                db_nearby_amenty <- db_nearby_amenty[,c(\"name\",\"lat\",\"lng\",\"address\",\"walking_distance\",\"walking_duration\",\"cid\")]\n                df_center_road <- read.csv(\"df_center_road.csv\",stringsAsFactors = FALSE)\n                df_landmark <- read.csv(\"df_landmark.csv\",stringsAsFactors = FALSE)\n        }\n        \n        ## Grading\n        \n        if (1==1) {\n                result <- data.frame(Criteria=character(),\n                                     data=numeric(),\n                                     minimum_standard=numeric(),\n                                     pass_or_not=character(),\n                                     stringsAsFactors = FALSE)\n                ### Define each criteria\n                result[1,\"Criteria\"] <- \"800米内地铁站数量\"\n                result[2,\"Criteria\"] <- \"800米内最近地铁站步行距离\"\n                result[3,\"Criteria\"] <- \"800米内最近地铁站步行时间\"\n                result[4,\"Criteria\"] <- \"1000米内4/5星级饭店数量\"\n                result[5,\"Criteria\"] <- \"1000米甲级写字楼数量\"\n                result[6,\"Criteria\"] <- \"1000米规模商业大众点评人均价格\"\n                result[7,\"Criteria\"] <- \"1000米内星巴克数量\"\n                result[8,\"Criteria\"] <- \"1000米内最近星巴克步行距离\"\n                result[9,\"Criteria\"] <- \"1000米内最近星巴克步行时间\"\n                result[10,\"Criteria\"] <- \"2000米内麦当劳数量\"\n                result[11,\"Criteria\"] <- \"2000米内最近麦当劳步行距离\"\n                result[12,\"Criteria\"] <- \"2000米内最近麦当劳步行时间\"\n                result[13,\"Criteria\"] <- \"1000米内餐馆数量\"\n                result[14,\"Criteria\"] <- \"1000米内餐馆百度地图人均价格\"\n                \n                ### Fill in data\n                tem <- subset(db_nearby_amenty,cid==\"station\")\n                if (nrow(tem)>0) {\n                        result[1,\"data\"] <- nrow(tem)\n                        result[2,\"data\"] <- min(tem$walking_distance)\n                        result[3,\"data\"] <- round(min(tem$walking_duration),1)\n                }\n                \n                tem <- subset(db_nearby_amenty,cid==\"hotel\")\n                if (nrow(tem)>0) {\n                        result[4,\"data\"] <- nrow(tem)\n                }\n                \n                tem <- subset(db_nearby_amenty,cid==\"stb\")\n                if (nrow(tem)>0) {\n                        result[7,\"data\"] <- nrow(tem)\n                        result[8,\"data\"] <- min(tem$walking_distance)\n                        result[9,\"data\"] <- round(min(tem$walking_duration),1)\n                }\n                \n                tem <- subset(db_nearby_amenty,cid==\"mdc\")\n                if (nrow(tem)>0) {\n                        result[10,\"data\"] <- nrow(tem)\n                        result[11,\"data\"] <- min(tem$walking_distance)\n                        result[12,\"data\"] <- round(min(tem$walking_duration),1)\n                }\n                \n                tem <- subset(db_nearby_amenty,cid==\"restaurant\")\n                if (nrow(tem)>0) {\n                        result[13,\"data\"] <- nrow(tem)\n                        result[14,\"data\"] <- restaurant_avg\n                }\n                \n                \n                \n                ## Set Minimum Standard\n                \n                result$minimum_standard <- c(1,800,10,1,1,59,1,1000,10,1,2000,20,10,30)\n                result\n                str(result)\n                \n                ## Judging weather pass or not \n                for (i in 1:nrow(result)) {\n                        if (!is.na(result$data)[i]) {\n                                if (is.na(result$data)[i]>=is.na(result$minimum_standard)[i]) {\n                                        result$pass_or_not[i] <- \"yes\"\n                                }\n                                else{\n                                        result$pass_or_not[i] <- \"no\"\n                                }\n                        }\n                }\n                write.csv(result,\"result_grading.csv\")\n        }\n\n\n## test\n\n# Leaflet bindings are a bit slow; for now we'll just sample to compensate\nset.seed(100)\n# zipdata <- allzips[sample.int(100, 10000),]\n# By ordering by centile, we ensure that the (comparatively rare) SuperZIPs\n# will be drawn last and thus be easier to see\n# zipdata <- zipdata[order(zipdata$centile),]\n\n# function(input, output, session) {\n        \n        ## Interactive Map ###########################################\n        \n        # Create the map\n        # output$map <- renderLeaflet({\n                \n                m = leaflet()\n                m = addTiles(m)\n                m = addTiles(m, group = \"OSM\") \n                m = addProviderTiles(m, \"OpenStreetMap.BlackAndWhite\", group = \"BlackAndWhite(default)\")\n                m = addProviderTiles(m,\"Stamen.Toner\", group = \"Toner\")\n                m = addProviderTiles(m, \"Stamen.TonerLite\", group = \"Toner Lite\")\n                # m = addProviderTiles(m, \"Stamen.Watercolor\", group = \"Watercolor\") \n                m = addProviderTiles(m, \"Stamen.TonerHybrid\", group = \"TonerHybrid\") \n                m = addProviderTiles(m, \"Esri.WorldImagery\", group = \"WorldImagery\")\n                # m = addProviderTiles(m, \"OpenMapSurfer.Roads\", group = \"OpenMapSurfer.Roads\")\n                \n                m = addLayersControl(m,\n                                     baseGroups = c(\"BlackAndWhite(default)\",\"OSM\",\"Toner Lite\",\"Toner\", \"TonerHybrid\",\"WorldImagery\"),\n                                     overlayGroups = c(\"1. nearby station\", \"2. nearby hotel\", \"3. nearby Mcdonalds\", \"4. nearby Starbucks\", \"5. Center Road\", \"6. City Center\", \"7. nearby Restaurant\", \"X1 - Mixpace(500m)\", \"X2 - Mixpace(seat)\", \"X3 - All Competitors(500m)\", \"X4 - All Competitors(seat)\")\n                                     # layersControlOptions(collapsed = FALSE, autoZIndex = FALSE)\n                )\n                \n                # str(db_nearby_amenty$cid)\n                \n                ### Define Icon\n                icon.fa.target <- makeAwesomeIcon(icon = \"star\", markerColor = \"orange\", library = \"fa\", iconColor = \"black\")\n                icon.fa.train <- makeAwesomeIcon(icon = \"subway\", markerColor = \"purple\", library = \"fa\", iconColor = \"black\")\n                icon.fa.stb <- makeAwesomeIcon(icon = \"coffee\", markerColor = \"green\", library = \"fa\", iconColor = \"black\")\n                icon.fa.mdc <- makeAwesomeIcon(icon = \"meetup\", markerColor = \"red\", library = \"fa\", iconColor = \"black\")\n                icon.fa.hotel <- makeAwesomeIcon(icon = \"hotel\", markerColor = \"blue\", library = \"fa\", iconColor = \"black\")\n                icon.landmark <- makeAwesomeIcon(icon = \"photo\", markerColor = \"red\", library = \"fa\", iconColor = \"black\")\n                icon.fa.restaurant <- makeAwesomeIcon(text = \"F\", markerColor = \"lightgreen\", library = \"fa\",iconColor = \"black\")\n                \n                ### Add to Maps \n                \n                # Target\n                m <- addAwesomeMarkers(m, lng = target_address_geo$lng, lat = target_address_geo$lat, label=target_address_geo$address, labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)),icon = icon.fa.target)\n                m = addCircles(m, lng = target_address_geo$lng, lat = target_address_geo$lat, weight = 2,fillOpacity=0.1, popup=\"500m\" ,color = \"blue\", radius = 500)\n                m = addCircles(m, lng = target_address_geo$lng, lat = target_address_geo$lat, weight = 1,fillOpacity=0.05, popup=\"1000m\" ,color = \"purple\", radius = 1000)\n                \n                # Station\n                db_nearby_amenty_station <- db_nearby_amenty[db_nearby_amenty$cid==\"station\",]\n                m <- addAwesomeMarkers(m, lng = db_nearby_amenty_station$lng, lat = db_nearby_amenty_station$lat, popup=db_nearby_amenty_station$name,icon = icon.fa.train, group = (\"1. nearby station\"))\n                \n                # Hotel\n                db_nearby_amenty_hotel <- db_nearby_amenty[db_nearby_amenty$cid==\"hotel\",]\n                m <- addAwesomeMarkers(m, lng = db_nearby_amenty_hotel$lng, lat = db_nearby_amenty_hotel$lat, popup=db_nearby_amenty_hotel$name,icon = icon.fa.hotel, group = (\"2. nearby hotel\"))\n                \n                # MDC\n                db_nearby_amenty_mdc <- db_nearby_amenty[db_nearby_amenty$cid==\"mdc\",]\n                m <- addAwesomeMarkers(m, lng = db_nearby_amenty_mdc$lng, lat = db_nearby_amenty_mdc$lat, popup=db_nearby_amenty_mdc$name,icon = icon.fa.mdc, group = (\"3. nearby Mcdonalds\"))\n                \n                # Starbucks\n                db_nearby_amenty_stb <- db_nearby_amenty[db_nearby_amenty$cid==\"stb\",]\n                m <- addAwesomeMarkers(m, lng = db_nearby_amenty_stb$lng, lat = db_nearby_amenty_stb$lat, popup=db_nearby_amenty_stb$name,icon = icon.fa.stb, group = (\"4. nearby Starbucks\"))\n                \n                # Add Restaurants\n                db_nearby_amenty_restaurant <- db_nearby_amenty[db_nearby_amenty$cid==\"restaurant\",]\n                m <- addAwesomeMarkers(m, lng = db_nearby_amenty_restaurant$lng, lat = db_nearby_amenty_restaurant$lat, popup=db_nearby_amenty_restaurant$name,icon = icon.fa.restaurant, group = (\"7. nearby Restaurant\"))\n                \n                \n                \n                # Competitor\n                \n                df_competor <- read.csv(\"df_competor.csv\",stringsAsFactors = FALSE)\n                m = addCircles(m, lng = df_competor$lng, lat = df_competor$lat, weight = 1,color = \"purple\", radius = sqrt(df_competor$seat) * 15, label = df_competor$brand, labelOptions = labelOptions(noHide = F, direction = 'bottom',offset=c(0,15)),group = \"X4 - All Competitors(seat)\")\n                m = addCircles(m, lng = df_competor$lng, lat = df_competor$lat, weight = 1,color = \"orange\", radius = 500, label = df_competor$brand, labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)), group = \"X3 - All Competitors(500m)\")\n                \n                \n                # Mixpace\n                df_mixpace <- read.csv(\"df_mixpace.csv\",stringsAsFactors = FALSE)\n                m = addCircles(m, lng = df_mixpace$lng, lat = df_mixpace$lat, weight = 1, color = \"blue\", radius = 500, label = df_mixpace$name,labelOptions = labelOptions(noHide = F, direction = 'bottom',offset=c(0,15)), group = \"X1 - Mixpace(500m)\")\n                m = addCircles(m, lng = df_mixpace$lng, lat = df_mixpace$lat, weight = 1, color = \"blue\", radius = sqrt(df_mixpace$seat) * 15, label = df_mixpace$name, labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)),group = \"X2 - Mixpace(seat)\")\n                \n                # Add center road\n                \n                str(df_center_road)\n                for (i in c(2:22,23)) {\n                        m = addPolylines(m, lat = c(df_center_road[i,\"lat_wgs84_bgn\"],df_center_road[i,\"lat_wgs84_end\"]), lng = c(df_center_road[i,\"lng_wgs84_bgn\"],df_center_road[i,\"lng_wgs84_end\"]), color = \"red\",group = \"5. Center Road\",label = df_center_road[i,\"name\"],labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)))\n                }\n                \n                m <- addPolylines(m, lat = c(df_center_road[24,\"lat_wgs84_bgn\"],df_center_road[25,\"lat_wgs84_end\"]), lng = c(df_center_road[24,\"lng_wgs84_bgn\"],df_center_road[25,\"lng_wgs84_end\"]), color = \"red\",group = \"5. Center Road\",label = df_center_road[i,\"name\"],labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)))\n                \n                m <- addAwesomeMarkers(m, lng = df_landmark$lng, lat = df_landmark$lat, label=df_landmark$landmark,labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)),icon = icon.landmark, group = (\"6. City Center\"))\n                \n                ### Add button\n                m<- m %>% addTiles() %>%\n                        addEasyButton(easyButton(\n                                icon = \"fa-globe\", title = \"Zoom to Level 5\",\n                                onClick = JS(\"function(btn, map){ map.setZoom(5);}\"))) %>%\n                        addEasyButton(easyButton(\n                                icon = \"fa-crosshairs\", title = \"Locate Shanghai\",\n                                onClick = JS(\"function(btn, map){ map.setView([31.23914,121.4823],12);}\")))\n        \n                ### hide layer \n                m <- m %>% hideGroup(c(\"5. Center Road\", \"6. City Center\", \"X1 - Mixpace(500m)\", \"X2 - Mixpace(seat)\", \"X3 - All Competitors(500m)\", \"X4 - All Competitors(seat)\"))\n                ### Show the Map\n                # m\n        })\n        \n        output$grading <- DT::renderDataTable({\n                \n                input$button\n                # isolate({\n                #         result <- result\n                # })\n                result <- read.csv(\"result_grading.csv\",stringsAsFactors = FALSE)\n                result <- result[,2:5]\n                result_rec <- result\n                colnames(result_rec) <- c(\"维度\",\"数据\",\"最低要求\",\"是否通过\")\n                datatable(result_rec, filter = 'top', options = list(\n                        pageLength = 20, autoWidth = TRUE\n                ))\n        })\n        \n        output$record <- DT::renderDataTable({\n                input$button\n                db_nearby_amenty <- read.csv(\"db_nearby_amenty.csv\",stringsAsFactors = FALSE)\n                db_nearby_amenty_rec <- db_nearby_amenty[,c(\"name\",\"address\",\"walking_distance\",\"walking_duration\",\"cid\")]\n                db_nearby_amenty_rec$walking_duration <- round(as.numeric(db_nearby_amenty_rec$walking_duration),1)\n                colnames(db_nearby_amenty_rec) <- c(\"名称\",\"地址\",\"步行距离(米)\",\"步行时间(分钟)\",\"设施分类\")\n                datatable(db_nearby_amenty_rec, filter = 'top', options = list(\n                        pageLength = 20, autoWidth = TRUE\n                ))\n                \n        })\n        \n        # output$plot_1 = renderPlot({\n        #         plot(cars)\n        # })\n        # \n        # output$plot_2 = renderPlot({\n        #         hist(cars)\n        # })\n        \n        output$value <- renderText({ input$caption })\n      \n}\n\n\n",
    "created" : 1531815669416.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "3|11|120|0|\n",
    "hash" : "2723101272",
    "id" : "9CA51263",
    "lastKnownWriteTime" : 1531817214,
    "last_content_update" : 1531817282613,
    "path" : "~/Desktop/Mixpace/ShinyMap/V3/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}